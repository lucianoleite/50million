basic_plot(d3.select("#basic-plot"));

function basic_plot(svg) {
  const DESCRIPTOR_FILE = "data/descriptor.json";

  // Standard D3 plot setup with margins for the axes.
  const margin = {
    top: 20,
    right: 20,
    bottom: 20,
    left: 30
  };
  const width = +svg.attr("width") - margin.left - margin.right;
  const height = +svg.attr("height") - margin.top - margin.bottom;
  const g = svg
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  const Y_DOMAIN = [-128, 127];
  const yScale = d3
    .scaleLinear()
    .domain(Y_DOMAIN)
    .range([height, 0]);

  const X_FULL_DOMAIN = [0, 1];
  const xDataScale = d3
    .scaleLinear()
    .domain(X_FULL_DOMAIN)
    .range([0, width])
    .clamp(true);

  // Setup the axes.
  const xAxis = d3.axisBottom(xDataScale).ticks(10);
  const yAxis = d3.axisLeft(yScale).ticks(4);

  // The charting function
  const area = d3
    .area()
    .y0(d => yScale(d.min))
    .y1(d => yScale(d.max));

  // This is the data descriptor that will be filled in later.
  let dataDescriptor;

  // X-axis
  g.append("g")
    .attr("class", "x-axis")
    .attr("transform", "translate(0," + height + ")")
    .call(xAxis);

  // Y-axis
  g.append("g")
    .attr("class", "y-axis")
    .call(yAxis);

  // Data view
  const gDataView = g.append("g").attr("class", "data-view");

  main();

  // Setup and draw the initial view
  async function main() {
    // First download the descriptor file for our data.
    await fetchDescriptor();

    // Then fetch the data that we want to plot.
    const data = await fetchData();

    // Then plot it
    const xViewScale = d3
      .scaleLinear()
      .domain([0, data.elements.length - 1])
      .range([0, width]);
    area.x((d, i) => xViewScale(i));

    gDataView
      .insert("path")
      .attr("class", "dataView area")
      .attr("d", area(data.elements));
  }

  // Fetch the descriptor file
  async function fetchDescriptor() {
    const response = await fetch(DESCRIPTOR_FILE);
    dataDescriptor = await response.json();
  }

  // Fetch data to be plotted.
  async function fetchData() {
    let level = 4;
    const lodFile = dataDescriptor.lodFiles[level - 1];
    const response = await fetch(lodFile.fileName);

    // Convert the raw byte array back to min/max elements
    const buf = await response.arrayBuffer();
    const view = await new Int8Array(buf);

    const elements = [];
    for (let i = 0; i < view.byteLength - 1; i += 2) {
      elements.push({
        min: view[i],
        max: view[i + 1]
      });
    }

    return { level, elements };
  }
}
