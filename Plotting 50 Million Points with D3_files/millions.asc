
function do_plot(svg, zoom_type) {

const margin = {top: 20, right: 20, bottom: 20, left: 30};
const width = +svg.attr("width") - margin.left - margin.right;
const height = +svg.attr("height") - margin.top - margin.bottom;
const g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

// For simplicity I'm directly using the domain 0..1 for the x-scale.
const X_FULL_DOMAIN = [0,1];

// Our audio data is stored as a signed byte per sample (-128 to 127) so our Y domain is fixed.
const Y_DOMAIN = [-128, 127];

// Since the Y domain is fixed, we won't need to change the Y scale.
const yScale = d3.scaleLinear().domain(Y_DOMAIN).range([height, 0]);

// For the X_FULL_DOMAIN of the overall data set.
const xDataScale = d3.scaleLinear().domain(X_FULL_DOMAIN).range([0, width]).clamp(true);

const xAxis = d3.axisBottom(xDataScale).ticks(10);
const yAxis = d3.axisLeft(yScale).ticks(4);

// Create a brush for selecting regions to zoom on.
const brush = d3.brushX()
                .extent([[0, 1], [width, height-1]])
                .on("end", brushended);

let idleTimeout;
const IDLE_DELAY = 350;

// Dureation of the zoom transition
let ZOOM_TIME = 500;
if(zoom_type === ZOOM_SLOW) {
    ZOOM_TIME = 10000;
}

const LOAD_DELAY_TIME = 200;

// Duration of the cross-fade transition
const CROSS_FADE_TIME = 150;

// The function used for transition easing
const TRANSITION_EASE = d3.easeSin;

// Area chart function
const area = d3.area()
               .y0((d) => yScale(d.min))
               .y1((d) => yScale(d.max))

// Line chart function
const line = d3.line()
               .y((d)  => yScale(d))

// Track the top level, new and old data sets.
let topData;
let newData;
let oldData;

// Keep track of our current zoom state.
let zoomInProgress;
const startZoom = () => { zoomInProgress = true; }
const endZoom = () => { zoomInProgress = false; }

let dataDescriptor;

// A clip path is needed to mask the chart underflowing the axes when zooming.
const clip = svg.append("defs")
                .append("svg:clipPath")
                .attr("id", "clip")
                .append("svg:rect")
                .attr("width", width)
                .attr("height", height)
                .attr("x", 0)
                .attr("y", 0);

// X-axis
g.append("g")
    .attr("class", "x-axis")
    .attr("transform", "translate(0," + height + ")")
    .call(xAxis);

// Y-axis
g.append("g")
    .attr("class", "y-axis")
    .call(yAxis);

// Data view
const gDataView = g.append("g").attr("class", "data-view");

// Zoom brush
if (zoom_type !== ZOOM_NONE) {
    g.append("g")
     .attr("class", "brush")
     .call(brush);
}

function brushended() {
    const s = d3.event.selection;
    
    // Consume the brush action
    if (s) {
        svg.select(".brush").call(brush.move, null);  
    }

    // Lock out interactions while a zoom is in progress.
    if (zoomInProgress) {
        return;
    }

    if (s) {
        if (zoom_type === ZOOM_INSTANT) {
            zoomSimple(s.map(xDataScale.invert, xDataScale));
        } else {
            zoomIn(s);
        }
    } else {
        // Rudimentary double-click detection
        if (!idleTimeout) {
            return idleTimeout = setTimeout(()=> {idleTimeout = null;}, IDLE_DELAY);
        }

        if (zoom_type === ZOOM_INSTANT) {
            zoomSimple(X_FULL_DOMAIN);
        } else {
            zoomOut();
        }
    }
}

async function zoomSimple(newDomain) {
    // Convert the span from screen coordinates to data space values.

    // Swap data
    oldData = newData;
    newData = null;

    // Adjust the X scale
    xDataScale.domain(newDomain);

    // Render the axis on the new domain with the transition.
    svg.select(".x-axis").call(xAxis);

    // Get the new data
    newData = await retrieveDomain(newDomain);
    const xEndViewScale = d3.scaleLinear().domain([0,newData.elements.length-1]).range([0, width]);

    // Draw it
    gDataView.select("*").remove();
    gDataView.append("path")
             .attr("class", getClass(newData))
             .attr("d", drawPath(newData, xEndViewScale));

}

async function zoomIn(s) {

    // Convert the span from screen coordinates to data space values.
    const newDomain = s.map(xDataScale.invert, xDataScale);
    
    // Swap data
    oldData = newData;
    newData = null;

    // Adjust the X scale
    xDataScale.domain(newDomain);

    // Setup a transition for the axis
    const zoomTransition = svg.transition("zoomTransition")
                              .ease(TRANSITION_EASE)
                              .duration(ZOOM_TIME)
                              .on("start", startZoom)
                              .on("end", endZoom);

    // Render the axis on the new domain with the transition.
    svg.select(".x-axis").transition(zoomTransition).call(xAxis);

    // Work out the new scale for the old data set and start the transition to it.
    const v = rangeFraction(oldData.domain, newDomain);
    const N = oldData.elements.length-1;
    const newViewDomain = [v[0] * N, v[1] * N];
    const xNewViewScale = d3.scaleLinear().domain(newViewDomain).range([0, width]);

    const lowResView = gDataView.selectAll('.dataView');
    lowResView.transition(zoomTransition)
                .attr("d", drawPath(oldData, xNewViewScale));

    // If the zoom is within the same level, then we're done.
    if (oldData.level === levelFromDomain(newDomain) || zoom_type === ZOOM_TOP) {
        newData = oldData;
        return;
    }

    // If the zoom was not within the same level, then we're off to grab some higher resolution data.
    const zoomTimeStarted = Date.now();
    newData = await retrieveDomain(newDomain);
    
    setTimeout(() => {

        // ... and we're back! Time to check in on the state of the world.
        
        // We can be in one of two places:
        //
        // 1. The zoom transition could still be going with a long time left.
        //    In this case, we'll synchronize the cross fade transition with the 
        //    zoom so they finish at the same time.
        //   
        // 2. The zoom transition may be almost done, or already finished.
        //    We still want a cross fade transition, but we'll schedule it on its
        //    own timeline.

        // Find out how long we've been waiting for data.
        const timeElapsed = Date.now() - zoomTimeStarted;
        const zoomTimeRemaining = ZOOM_TIME - timeElapsed;
        
        const fadeTime = Math.max(CROSS_FADE_TIME, zoomTimeRemaining);

        const fadeTransition = svg.transition("fadeTransition")
                                  .ease(TRANSITION_EASE)
                                  .duration(fadeTime);  

        const xEndDomain = [0,newData.elements.length-1];
        const xStartViewScale = d3.scaleLinear().domain(xEndDomain).range(s);
        const xEndViewScale = d3.scaleLinear().domain(xEndDomain).range([0, width]);
        
        const highResView = gDataView.insert("path", ":first-child")
                                        .attr("class", getClass(newData))
                                        .attr("opacity",  "0");
                                        
        // If we're still zooming in, then animate the path coming in. Otherwise, we'll
        // fade in directly at the end position.
        if (zoomTimeRemaining > CROSS_FADE_TIME) {
            highResView.attr("d", drawPath(newData, xStartViewScale))
                       .transition(zoomTransition)
                        .attr("d", drawPath(newData, xEndViewScale))
                        .attr("opacity",  "1");
        } else {
            highResView.attr("d", drawPath(newData, xEndViewScale))
                       .transition(fadeTransition)
                        .attr("opacity",  "1");
        }
        
        // Fade opacity from 1..0 then remove the plot.
        lowResView.attr("opacity", "1")
                  .transition(fadeTransition)
                    .attr("opacity",  "0")
                    .remove();
    }, LOAD_DELAY_TIME);
}

function zoomOut() {

    const oldDomain = xDataScale.domain();
    
    // Don't zoom out if we're already zoomed out.
    if (oldDomain[0] === X_FULL_DOMAIN[0] && oldDomain[1] ===  X_FULL_DOMAIN[1]) {
        return;
    }

    // Swap data
    oldData = newData;
    newData = topData;
    
    // Adjust the X scale
    xDataScale.domain(X_FULL_DOMAIN);

    // Setup the transition
    const zoomTransition = svg.transition("zoomTransition")
                                .ease(d3.easeSinInOut)
                                .duration(ZOOM_TIME)
                                .on("start", startZoom)
                                .on("end", endZoom);

    // Transition the axis
    svg.select(".x-axis").transition(zoomTransition).call(xAxis);

    // Zoom out to the top level
    const oldRange = [oldDomain[0] * width, oldDomain[1] * width];
    const oldViewScale = d3.scaleLinear().domain([0,oldData.elements.length-1]).range(oldRange);

    gDataView.selectAll('.dataView')
             .attr("opacity", 1)
             .transition(zoomTransition)
                .attr("d", drawPath(oldData, oldViewScale))
                .attr("opacity", 0)
                .remove();

    // Zoom back in the top level data
    const N = topData.elements.length-1;
    const xStartDomain = [N * oldDomain[0], N * oldDomain[1]];
    const xEndDomain = [0, N];
    const xStartViewScale = d3.scaleLinear().domain(xStartDomain).range([0, width]);
    const xEndViewScale = d3.scaleLinear().domain(xEndDomain).range([0, width]);

    gDataView.insert("path", ":first-child")
                .attr("class", getClass(topData))
                .attr("opacity", -5)
                .attr("d", drawPath(topData, xStartViewScale))
                .transition(zoomTransition)
                    .attr("d", drawPath(topData, xEndViewScale))
                    .attr("opacity", 1);
}

function getClass(data) {
    return data.level > 0 ? "dataView area" : "dataView line";
}

function drawPath(data, scale) {
    const pathFunc = data.level > 0 ? area : line;
    return pathFunc.x((d, i) => scale(i))(data.elements);
}

// Find the fractional range of b inside a.
function rangeFraction(a, b) {
    const span = 1/(a[1] - a[0]);
    return [(b[0] - a[0]) * span, 1 - ((a[1] - b[1]) * span)];
}


function levelFromDomain(domain) {
    const domainSpan = domain[1] - domain[0];
    const unscaledElements = Math.ceil(dataDescriptor.nElements * domainSpan);

    let level = 0;
    if (unscaledElements > dataDescriptor.maxElements) {
        let a = Math.log(unscaledElements/dataDescriptor.maxElements);
        let b = Math.log(dataDescriptor.windowSize);
        level = Math.ceil(a/b);
    }
    return level;
}

async function retrieveDomain(domain) {

    const level = levelFromDomain(domain);

    const nElements = level === 0 ? dataDescriptor.nElements : dataDescriptor.lodFiles[level-1].nElements;

    // Convert from the domain space 0..1 to actual elements in this scale level
    const elementStart = Math.max(Math.floor(domain[0] * nElements), 0);
    const elementEnd = Math.min(Math.ceil(domain[1] * nElements), nElements-1);

    if (level > 0) {
        const lodFile = dataDescriptor.lodFiles[level-1];

        // Determine byte offsets for these elements:
        // Each element is 2 bytes (min, max)
        const ELEMENT_SIZE = 2;

        const rangeStart = elementStart * ELEMENT_SIZE;
        const rangeEnd = (elementEnd * ELEMENT_SIZE) + ELEMENT_SIZE;
        
        // Fetch a section of the data file with a range request.
        // see: https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests
        const response = await fetch(lodFile.fileName, {headers: { "Range": `bytes=${rangeStart}-${rangeEnd}` }});
        
        // Convert the raw byte array back to min/max elements
        const buf = await response.arrayBuffer();
        const view = await new Int8Array(buf);

        const elements = [];
        for(let i = 0; i < view.byteLength - 1; i += 2) {
            elements.push({
                min: view[i], 
                max: view[i+1]
            });
        }

        return { domain, level, elements };

    } else {
        const response = await fetch(dataDescriptor.fileName, {headers: { "Range": `bytes=${elementStart}-${elementEnd+1}` }});
        
        // At level 0 we have actual data points (not min/max aggregates)
        const buf = await response.arrayBuffer();
        const elements = await new Int8Array(buf)

        return { domain, level, elements };
    }
}

// Fetch the data descriptor
d3.json("data/descriptor.json").then(async (json) => {
    dataDescriptor = json;
    newData = await retrieveDomain(X_FULL_DOMAIN);
    topData = newData;

    const xViewScale = d3.scaleLinear().domain([0,newData.elements.length-1]).range([0, width]);
    gDataView.insert("path")
             .attr("class", getClass(newData))
             .attr("d", drawPath(newData, xViewScale))

});

};

const ZOOM_NONE      = "NONE";
const ZOOM_INSTANT   = "INSTANT";
const ZOOM_TOP       = "TOP";
const ZOOM_SLOW      = "SLOW";
const ZOOM_FAST      = "FAST"


//do_plot(d3.select("#zoom-instant"), ZOOM_INSTANT);
do_plot(d3.select("#zoom-top"),     ZOOM_TOP);
// do_plot(d3.select("#zoom-slow"),    ZOOM_SLOW);
// do_plot(d3.select("#zoom-fast"),    ZOOM_FAST);