zoom_plot(d3.select("#zoom-plot"));

function zoom_plot(svg) {
  const DESCRIPTOR_FILE = "data/descriptor.json";

  // Standard D3 plot setup with margins for the axes.
  const margin = { top: 20, right: 20, bottom: 20, left: 30 };
  const width = +svg.attr("width") - margin.left - margin.right;
  const height = +svg.attr("height") - margin.top - margin.bottom;
  const g = svg
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  const Y_DOMAIN = [-128, 127];
  const yScale = d3
    .scaleLinear()
    .domain(Y_DOMAIN)
    .range([height, 0]);

  const X_FULL_DOMAIN = [0, 1];
  const xDataScale = d3
    .scaleLinear()
    .domain(X_FULL_DOMAIN)
    .range([0, width])
    .clamp(true);

  const xAxis = d3.axisBottom(xDataScale).ticks(10);
  const yAxis = d3.axisLeft(yScale).ticks(4);

  // Area chart function
  const area = d3
    .area()
    .y0(d => yScale(d.min))
    .y1(d => yScale(d.max));

  // Line chart function
  const line = d3.line().y(d => yScale(d));

  // Create a brush for selecting regions to zoom on.
  const brush = d3
    .brushX()
    .extent([[0, 1], [width, height - 1]])
    .on("end", brushEnded);

  let idleTimeout;
  const IDLE_DELAY = 350;
  const MIN_ZOOM_ELEMENTS = 5;

  let dataDescriptor;

  // X-axis
  g.append("g")
    .attr("class", "x-axis")
    .attr("transform", "translate(0," + height + ")")
    .call(xAxis);

  // Y-axis
  g.append("g")
    .attr("class", "y-axis")
    .call(yAxis);

  // Data view
  const gDataView = g.append("g").attr("class", "data-view");

  // Zoom brush
  g.append("g")
    .attr("class", "brush")
    .call(brush);

  main();

  // Setup and draw the initial view
  async function main() {

    // First download the descriptor file for our data.
    await fetchDescriptor();

    // Then fetch the data that we want to plot.
    const data = await fetchData(X_FULL_DOMAIN);

    // Then plot it
    const xViewScale = d3
      .scaleLinear()
      .domain([0, data.elements.length - 1])
      .range([0, width]);

    const pathFunc = getPathFunction(data);
    pathFunc.x((d, i) => xViewScale(i));

    gDataView
      .insert("path")
      .attr("class", getClass(data))
      .attr("d", pathFunc(data.elements));
  }

  // Choose the function to draw, either an area or a line chart, depending on the level
  function getPathFunction(data) {
    return data.level > 0 ? area : line;
  }

  // Choose the CSS class for an area or line chart, depending on the level.
  function getClass(data) {
    return data.level > 0 ? "dataView area" : "dataView line";
  }

  // Handler for the end of a brush event from D3.
  function brushEnded() {
    const s = d3.event.selection;

    // Consume the brush action
    if (s) {
      svg.select(".brush").call(brush.move, null);
    }

    if (s) {
      zoom(s.map(xDataScale.invert, xDataScale));
    } else {
      // Rudimentary double-click detection
      if (!idleTimeout) {
        return (idleTimeout = setTimeout(() => {
          idleTimeout = null;
        }, IDLE_DELAY));
      }

      zoom(X_FULL_DOMAIN);
    }
  }

  // Zoom the view to a given domain within the data domain 0..1
  async function zoom(newDomain) {

    // Check to see if we're trying to go lower than our minimum.
    if (
      newDomain[1] - newDomain[0] <
      MIN_ZOOM_ELEMENTS / dataDescriptor.nElements
    ) {
      console.log("Max Zoom");
      return;
    }

    // Adjust the X scale
    xDataScale.domain(newDomain);

    // Render the axis on the new domain with the transition.
    svg.select(".x-axis").call(xAxis);

    // Remove the old data
    gDataView.select("*").remove();

    // Get the new data
    const data = await fetchData(newDomain);
    const xViewScale = d3
      .scaleLinear()
      .domain([0, data.elements.length - 1])
      .range([0, width]);

    const pathFunc = getPathFunction(data);
    pathFunc.x((d, i) => xViewScale(i));

    // Draw it
    gDataView
      .append("path")
      .attr("class", getClass(data))
      .attr("d", pathFunc(data.elements));
  }

  // Fetch data to be plotted.
  async function fetchData(domain) {
    const level = levelFromDomain(domain);

    let nElements;
    if (level === 0) {
      nElements = dataDescriptor.nElements;
    } else {
      nElements = dataDescriptor.lodFiles[level - 1].nElements;
    }

    // Convert from the domain space 0..1 to actual elements in this scale level
    const elementStart = Math.max(Math.floor(domain[0] * nElements), 0);
    const elementEnd = Math.min(
      Math.ceil(domain[1] * nElements),
      nElements - 1
    );

    if (level > 0) {
      const lodFile = dataDescriptor.lodFiles[level - 1];

      // Determine byte offsets for these elements:
      // Each element is 2 bytes (min, max)
      const ELEMENT_SIZE = 2;

      const rangeStart = elementStart * ELEMENT_SIZE;
      const rangeEnd = elementEnd * ELEMENT_SIZE + ELEMENT_SIZE - 1;

      const view = await fetchByteRange(lodFile.fileName, rangeStart, rangeEnd);
      let elements = [];
      for (let i = 0; i < view.byteLength - 1; i += 2) {
        elements.push({
          min: view[i],
          max: view[i + 1]
        });
      }

      return { domain, level, elements };
    } else {

      // At level 0 we have actual data points (not min/max aggregates)
      const elements = await fetchByteRange(
        dataDescriptor.fileName,
        elementStart,
        elementEnd
      );
      return { domain, level, elements };
    }
  }

  // Determine which level to use for a view, given a domain span.
  function levelFromDomain(domain) {
    const domainSpan = domain[1] - domain[0];

    // Check level 0
    const nElements = Math.ceil(dataDescriptor.nElements * domainSpan);
    if (nElements <= dataDescriptor.maxElements) return 0;

    // Then check the LOD levels.
    let a = Math.log(nElements / dataDescriptor.maxElements);
    let b = Math.log(dataDescriptor.windowSize);
    return Math.ceil(a / b);
  }

  // Fetch a byte range for a file.
  async function fetchByteRange(file, rangeStart, rangeEnd) {
    const headers = { Range: `bytes=${rangeStart}-${rangeEnd}` };
    const response = await fetch(file, { headers });

    const buf = await response.arrayBuffer();
    let byteOffset = 0;
    let length = rangeEnd - rangeStart + 1;

    // If the server sends back the whole file for some reason,
    // then we'll handle it by doing our own offset into it.
    if (response.status === 200) {
      byteOffset = rangeStart;
    }

    const view = await new Int8Array(buf, byteOffset, length);
    return view;
  }

  // Fetch the descriptor file
  async function fetchDescriptor() {
    const response = await fetch(DESCRIPTOR_FILE);
    dataDescriptor = await response.json();
  }
}
